[*.cs]

# IDE rules taken from https://learn.microsoft.com/dotnet/fundamentals/code-analysis/style-rules (2025-05-20)

# Simplify name
dotnet_diagnostic.IDE0001.severity = error

# Simplify member access
dotnet_diagnostic.IDE0002.severity = error

# Remove this or Me qualification
dotnet_diagnostic.IDE0003.severity = error

# Remove unnecessary cast
dotnet_diagnostic.IDE0004.severity = error

# Remove unnecessary import
dotnet_diagnostic.IDE0005.severity = error

# Use var instead of explicit type
dotnet_diagnostic.IDE0007.severity = error

# Use explicit type instead of var
dotnet_diagnostic.IDE0008.severity = error

# Add this or Me qualification
dotnet_diagnostic.IDE0009.severity = error

# Add missing cases to switch statement
dotnet_diagnostic.IDE0010.severity = error

# Add braces
dotnet_diagnostic.IDE0011.severity = error

# Use throw expression
dotnet_diagnostic.IDE0016.severity = error

# Use object initializers
dotnet_diagnostic.IDE0017.severity = error

# Inline variable declaration
dotnet_diagnostic.IDE0018.severity = error

# Use pattern matching to avoid as followed by a null check
dotnet_diagnostic.IDE0019.severity = error

# Use pattern matching to avoid is check followed by a cast (with variable)
dotnet_diagnostic.IDE0020.severity = error

# Use expression body for constructors
dotnet_diagnostic.IDE0021.severity = error

# Use expression body for methods
dotnet_diagnostic.IDE0022.severity = error

# Use expression body for conversion operators
dotnet_diagnostic.IDE0023.severity = error

# Use expression body for operators
dotnet_diagnostic.IDE0024.severity = error

# Use expression body for properties
dotnet_diagnostic.IDE0025.severity = error

# Use expression body for indexers
dotnet_diagnostic.IDE0026.severity = error

# Use expression body for accessors
dotnet_diagnostic.IDE0027.severity = error

# Use collection initializers
dotnet_diagnostic.IDE0028.severity = error

# Null check can be simplified
dotnet_diagnostic.IDE0029.severity = error

# Null check can be simplified
dotnet_diagnostic.IDE0030.severity = error

# Use null propagation
dotnet_diagnostic.IDE0031.severity = error

# Use auto property
dotnet_diagnostic.IDE0032.severity = error

# Use explicitly provided tuple name
dotnet_diagnostic.IDE0033.severity = error

# Simplify default expression
dotnet_diagnostic.IDE0034.severity = error

# Remove unreachable code
dotnet_diagnostic.IDE0035.severity = error

# Order modifiers
dotnet_diagnostic.IDE0036.severity = error

# Use inferred member name
dotnet_diagnostic.IDE0037.severity = error

# Use pattern matching to avoid is check followed by a cast (without variable)
dotnet_diagnostic.IDE0038.severity = error

# Use local function instead of lambda
dotnet_diagnostic.IDE0039.severity = error

# Add accessibility modifiers
dotnet_diagnostic.IDE0040.severity = error

# Use is null check
dotnet_diagnostic.IDE0041.severity = error

# Deconstruct variable declaration
dotnet_diagnostic.IDE0042.severity = error

# Add readonly modifier
dotnet_diagnostic.IDE0044.severity = error

# Use conditional expression for assignment
dotnet_diagnostic.IDE0045.severity = error

# Use conditional expression for return
dotnet_diagnostic.IDE0046.severity = error

# Remove unnecessary parentheses
dotnet_diagnostic.IDE0047.severity = error

# Add parentheses for clarity
dotnet_diagnostic.IDE0048.severity = error

# Use language keywords instead of framework type names for type references
dotnet_diagnostic.IDE0049.severity = error

# Convert anonymous type to tuple
dotnet_diagnostic.IDE0050.severity = error

# Remove unused private member
dotnet_diagnostic.IDE0051.severity = error

# Remove unread private member
dotnet_diagnostic.IDE0052.severity = error

# Use expression body for lambdas
dotnet_diagnostic.IDE0053.severity = error

# Use compound assignment
dotnet_diagnostic.IDE0054.severity = error

# Fix formatting
dotnet_diagnostic.IDE0055.severity = error

# Use index operator
dotnet_diagnostic.IDE0056.severity = error

# Use range operator
dotnet_diagnostic.IDE0057.severity = error

# Remove unused expression value
dotnet_diagnostic.IDE0058.severity = error

# Remove unnecessary value assignment
dotnet_diagnostic.IDE0059.severity = error

# Remove unused parameter
dotnet_diagnostic.IDE0060.severity = error

# Use expression body for local functions
dotnet_diagnostic.IDE0061.severity = error

# Make local function static
dotnet_diagnostic.IDE0062.severity = error

# Use simple using statement
dotnet_diagnostic.IDE0063.severity = error

# Make struct fields writable
dotnet_diagnostic.IDE0064.severity = error

# using directive placement
dotnet_diagnostic.IDE0065.severity = error

# Use switch expression
dotnet_diagnostic.IDE0066.severity = error

# Use System.HashCode.Combine
dotnet_diagnostic.IDE0070.severity = error

# Simplify interpolation
dotnet_diagnostic.IDE0071.severity = error

# Add missing cases to switch expression
dotnet_diagnostic.IDE0072.severity = error

# Use file header
dotnet_diagnostic.IDE0073.severity = error

# Use coalesce compound assignment
dotnet_diagnostic.IDE0074.severity = error

# Simplify conditional expression
dotnet_diagnostic.IDE0075.severity = error

# Remove invalid global SuppressMessageAttribute
dotnet_diagnostic.IDE0076.severity = error

# Avoid legacy format target in global SuppressMessageAttribute
dotnet_diagnostic.IDE0077.severity = error

# Use pattern matching
dotnet_diagnostic.IDE0078.severity = error

# Remove unnecessary suppression
dotnet_diagnostic.IDE0079.severity = error

# Remove unnecessary suppression operator
dotnet_diagnostic.IDE0080.severity = error

# Remove ByVal
dotnet_diagnostic.IDE0081.severity = error

# Convert typeof to nameof
dotnet_diagnostic.IDE0082.severity = error

# Use pattern matching (not operator)
dotnet_diagnostic.IDE0083.severity = error

# Use pattern matching (IsNot operator)
dotnet_diagnostic.IDE0084.severity = error

# Simplify new expression
dotnet_diagnostic.IDE0090.severity = error

# Remove unnecessary equality operator
dotnet_diagnostic.IDE0100.severity = error

# Remove unnecessary discard
dotnet_diagnostic.IDE0110.severity = error

# Simplify LINQ expression
dotnet_diagnostic.IDE0120.severity = error

# Simplify LINQ type check and cast
dotnet_diagnostic.IDE0121.severity = error

# Namespace does not match folder structure
dotnet_diagnostic.IDE0130.severity = error

# Simplify object creation
dotnet_diagnostic.IDE0140.severity = error

# Prefer null check over type check
dotnet_diagnostic.IDE0150.severity = error

# Use block-scoped namespace
dotnet_diagnostic.IDE0160.severity = error

# Use file-scoped namespace
dotnet_diagnostic.IDE0161.severity = error

# Simplify property pattern
dotnet_diagnostic.IDE0170.severity = error

# Use tuple to swap values
dotnet_diagnostic.IDE0180.severity = error

# Remove unnecessary lambda expression
dotnet_diagnostic.IDE0200.severity = error

# Convert to top-level statements
dotnet_diagnostic.IDE0210.severity = error

# Convert to 'Program.Main' style program
dotnet_diagnostic.IDE0211.severity = error

# Add explicit cast in foreach loop
dotnet_diagnostic.IDE0220.severity = error

# Use UTF-8 string literal
dotnet_diagnostic.IDE0230.severity = error

# Nullable directive is redundant
dotnet_diagnostic.IDE0240.severity = error

# Nullable directive is unnecessary
dotnet_diagnostic.IDE0241.severity = error

# Struct can be made 'readonly'
dotnet_diagnostic.IDE0250.severity = error

# Member can be made 'readonly'
dotnet_diagnostic.IDE0251.severity = error

# Use pattern matching
dotnet_diagnostic.IDE0260.severity = error

# Null check can be simplified
dotnet_diagnostic.IDE0270.severity = error

# Use nameof
dotnet_diagnostic.IDE0280.severity = error

# Use primary constructor
dotnet_diagnostic.IDE0290.severity = error

# Use collection expression for array
dotnet_diagnostic.IDE0300.severity = error

# Use collection expression for empty
dotnet_diagnostic.IDE0301.severity = error

# Use collection expression for stackalloc
dotnet_diagnostic.IDE0302.severity = error

# Use collection expression for Create()
dotnet_diagnostic.IDE0303.severity = error

# Use collection expression for builder
dotnet_diagnostic.IDE0304.severity = error

# Use collection expression for fluent
dotnet_diagnostic.IDE0305.severity = error

# Use collection expression for new
dotnet_diagnostic.IDE0306.severity = error

# Make anonymous function static
dotnet_diagnostic.IDE0320.severity = error

# Prefer 'System.Threading.Lock'
dotnet_diagnostic.IDE0330.severity = error

# Use unbound generic type
dotnet_diagnostic.IDE0340.severity = error

# Use implicitly typed lambda
dotnet_diagnostic.IDE0350.severity = error

# Use conditional delegate call
dotnet_diagnostic.IDE1005.severity = error

# Naming styles
dotnet_diagnostic.IDE1006.severity = error
